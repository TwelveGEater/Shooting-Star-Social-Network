{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","document","addEventListener","e","target","className","s","like","content","post","src","alt","value","maxLength","maxLengthCreator","AddPostFormeRedux","reduxForm","form","onSubmit","handleSubmit","postCreate","inputField","Field","validate","RequiredField","component","Textarea","name","placeholder","MyPosts","React","memo","posts","reverse","map","dataItem","key","id","values","addPost","newPostBody","MyPostsContainer","connect","state","profileServerData","profileData","postInputText","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","currentTarget","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","formSummaryError","createField","Input","type","Object","keys","contacts","style","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","photos","large","userIcon","mainPhoto","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.e0bbda1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backRofl\":\"ProfileInfo_backRofl__1eN2m\",\"content\":\"ProfileInfo_content__1cDsN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postCreate\":\"MyPosts_postCreate__1TcZP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__3wWw4\",\"post\":\"Post_post__3I9mN\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n  //let countLike = props.like;\r\n  document.addEventListener(\"click\", function(e) {\r\n    if (e.target.className ===`${s.like}`) {\r\n      //debugger\r\n    }\r\n  });\r\n\r\n    return (  \r\n      <div className={s.content}>\r\n      <div className = {s.post}>\r\n        <img src = 'https://4.bp.blogspot.com/-SyaWak2-CzU/U82yEeW8Q9I/AAAAAAAAAXw/9zqw8bX7NQQ/s1600/no-game-no-life-sora-badass.jpg' alt = 'avatarMiniature'>\r\n        </img>\r\n      {props.value}\r\n      </div>\r\n    <span className = {s.like}>Like {props.like} </span>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {RequiredField, maxLengthCreator} from '../../../utils/validators'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Textarea } from './../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength = maxLengthCreator(10);\r\n\r\nconst AddPostForm = (props) => {\r\n\treturn (\r\n\t<form onSubmit = {props.handleSubmit} className={s.postCreate}>\r\n\t\t<div className={s.inputField}>\r\n\t\t\t<Field \r\n\t\t\tvalidate = {[RequiredField, maxLength]}\r\n\t\t\t component = {Textarea}\r\n\t\t\t name = {'newPostBody'}\r\n\t\t\t placeholder = {'Enter new post'} />\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<button>Add Post</button>\r\n\t\t\t<button>Remove</button>\r\n\t\t</div>\r\n\t</form>\r\n)\r\n}\r\n\t\r\n\tconst AddPostFormeRedux = reduxForm({\r\n\t\tform: 'profileAddPostForm'\r\n\t  })(AddPostForm)\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\t\r\n\t\r\n\tlet addPost = (values) => {\r\n\t\tprops.addPost(values.newPostBody);\r\n\t}\r\n\r\n\tlet posts = [...props.posts].reverse().map((dataItem) => <Post key = {dataItem.id} value={dataItem.value} like={dataItem.like} />);\r\n\treturn (\r\n\t\t<div className={s.content}>\r\n\t\t<AddPostFormeRedux onSubmit = {addPost}/>\r\n\t\t\t{posts}\r\n\t\t</div>\r\n\t);\r\n})\r\n\r\nexport default MyPosts;\r\n\r\n\r\n\t// let newPostElem = React.createRef();\r\n\r\n\t// let addPost = () => {\r\n\t// \tprops.addPost();\r\n\t// };\r\n\r\n\t// let onPostChangeText = () => {\r\n\t// \tlet text = newPostElem.current.value;\r\n\t// \tprops.postChangeText(text);\r\n\t// };\r\n","import React from 'react';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tposts: state.profileServerData.profileData,\r\n\t\tpostInputText: state.profileServerData.postInputText\r\n\t}\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\taddPost: (newPostBody) => {\r\n\t\t\tdispatch(addPostActionCreator(newPostBody));\r\n\t\t},\r\n\t}\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n// \treturn <StoreContext.Consumer>\r\n// \t\t\t{ store => {\r\n// \t\t\t\tdebugger\r\n// \t\t\t\tlet state = store.getState();\r\n// \t\t\t\tlet addPost = () => {\r\n// \t\t\t\t\tstore.dispatch(addPostActionCreator());\r\n// \t\t\t\t};\r\n\r\n// \t\t\t\tlet onPostChangeText = (text) => {\r\n// \t\t\t\t\tlet action = ;\r\n// \t\t\t\t\tstore.\r\n// \t\t\t\t};\r\n// \t\t\t\treturn (\r\n// \t\t\t\t\t<MyPosts\r\n// \t\t\t\t\t\tpostChangeText={onPostChangeText}\r\n// \t\t\t\t\t\taddPost={addPost}\r\n// \t\t\t\t\t\tposts={state.profileServerData.profileData}\r\n// \t\t\t\t\t\tpostInputText={state.profileServerData.postInputText}\r\n// \t\t\t\t\t/>\r\n// \t\t\t\t);\r\n// \t\t\t}}\r\n// \t\t</StoreContext.Consumer>\r\n// };","import React, {useState, useEffect} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => { \r\n\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\tlet [status, setStatus] = useState(props.status);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetStatus(props.status);\r\n\t}, [props.status])\r\n\r\n\tconst activateEditMode = () => {\r\n\t\tsetEditMode({\r\n\t\t\teditMode: true\r\n\t\t});\r\n\t};\r\n\r\n\tconst deactivateEditMode = () => {\r\n\t\tsetEditMode(false);\r\n\t\tprops.updateStatus(status);\r\n\t};\r\n\r\n\tconst onStatusChange = (e) => {\r\n\t\tsetStatus(e.currentTarget.value);\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t\t{!editMode &&\r\n\t\t\t\t<div className={s.content}>\r\n\t\t\t\t<b>Status:</b>\t<span onDoubleClick={activateEditMode}>{props.status || '-----'} </span>\r\n\t\t\t\t</div>\r\n}\r\n\t\t\t\t{editMode && \r\n\t\t\t\t<div className={s.content}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tonChange={onStatusChange}\r\n\t\t\t\t\t\tautoFocus={true}\r\n\t\t\t\t\t\tonBlur={deactivateEditMode}\r\n\t\t\t\t\t\tvalue={status}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>}\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport { createField, Input } from '../../common/FormsControls/FormsControls';\r\nimport { reduxForm } from 'redux-form';\r\nimport { Textarea } from './../../common/FormsControls/FormsControls';\r\nimport style from './ProfileInfo.module.css';\r\nimport s from '../../common/FormsControls/FormsControls.module.css'\r\n\r\nexport const ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n\treturn (\r\n\t\t<form onSubmit = {handleSubmit}>\r\n\t\t\t<button>save</button>\r\n\t\t\t{ error && <div className = {s.formSummaryError}>\r\n\t\t\t\t{error}\r\n\t\t\t</div>}\r\n\t\t\t<div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<b>Full name:</b> {createField('Full name', 'fullName', [], Input)}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<b>Looking for a job:</b> {createField('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<b>My professionals skills:</b>\r\n\t\t\t\t\t{createField('My professionals skills', 'lookingForAJobDescription', [], Textarea)}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<b>About me:</b>\r\n\t\t\t\t\t{createField('About me', 'aboutMe', [], Textarea)}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t <div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<b>Contacts:</b>{' '}\r\n\t\t\t\t\t{Object.keys(profile.contacts).map((key) => {\r\n\t\t\t\t\t\treturn <div key = {key} className = {style.contact}>\r\n\t\t\t\t\t\t\t<b>{key}: {createField(key, 'contacts.' + key, [], Textarea)}</b>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t})}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { useState } from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport userIcon from '../../../img/user.png';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport ProfileDataFormReduxForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({ isOwner, profile, status, updateStatus, savePhoto, saveProfile }) => {\r\n\tlet [ editMode, setEditMode ] = useState(false);\r\n\r\n\tif (!profile) {\r\n\t\treturn <Preloader />;\r\n\t}\r\n\r\n\tconst onSubmit = (formData) => {\r\n\t\tsaveProfile(formData).then(() => {\r\n\t\t\treturn setEditMode(false);\r\n\t\t});\r\n\t};\r\n\r\n\tconst mainPhotoSelected = (e) => {\r\n\t\tif (e.target.files.length) {\r\n\t\t\tsavePhoto(e.target.files[0]);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={style.content}>\r\n\t\t\t{/* <img className={style.backRofl} src= {img} alt = 'post'/> */}\r\n\t\t\t<div>\r\n\t\t\t\t<img src={profile.photos.large || userIcon} className={style.mainPhoto} alt=\"photos large\" />\r\n\t\t\t\t{isOwner && editMode && <input type=\"file\" onChange={mainPhotoSelected} />}\r\n\t\t\t\t{editMode ? (\r\n\t\t\t\t\t<ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<ProfileData\r\n\t\t\t\t\t\tprofile={profile}\r\n\t\t\t\t\t\tisOwner={isOwner}\r\n\t\t\t\t\t\tgoToEditMode={() => {\r\n\t\t\t\t\t\t\tsetEditMode(true);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{isOwner && <button onClick={goToEditMode}>edit</button>}\r\n\t\t\t<div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<b>Full name:</b> {profile.fullName}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t{profile.lookingForAJob && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<b>My professionals skills:</b> {profile.lookingForAJobDescription}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<b>About me:</b> {profile.aboutMe}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<b>Contacts:</b>{' '}\r\n\t\t\t\t\t{Object.keys(profile.contacts).map((key) => {\r\n\t\t\t\t\t\tif (!!profile.contacts[key]) {\r\n\t\t\t\t\t\t\treturn <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<span>\r\n\t\t\t\t<b>{contactTitle}:</b> {contactValue}\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = ({ isOwner, profile, status, updateStatus, savePhoto, saveProfile}) => {\r\n\treturn (\r\n\t\t<div className={s.content}>\r\n\t\t\t<ProfileInfo\r\n\t\t\t\tsavePhoto={savePhoto}\r\n\t\t\t\tisOwner={isOwner}\r\n\t\t\t\tprofile={profile}\r\n\t\t\t\tstatus={status}\r\n\t\t\t\tsaveProfile = {saveProfile}\r\n\t\t\t\tupdateStatus={updateStatus}\r\n\t\t\t/>\r\n\t\t\t<MyPostsContainer />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getUserProfile } from '../../redux/profile-reducer';\r\nimport { compose } from 'redux';\r\nimport { getStatus, updateStatus, savePhoto, saveProfile} from './../../redux/profile-reducer';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\trefreshProfile() {\r\n\t\tlet userId = this.props.match.params.userId;\r\n\t\tif (!userId) {\r\n\t\t\tuserId = this.props.authorizedUserId;\r\n\t\t\tif (!userId) {\r\n\t\t\t\tthis.props.history.push('/login');\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.props.getUserProfile(userId);\r\n\t\tthis.props.getStatus(userId);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.refreshProfile();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n\t\t\tthis.refreshProfile();\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Profile\r\n\t\t\t\t{...this.props}\r\n\t\t\t\tisOwner={!this.props.match.params.userId}\r\n\t\t\t\tprofile={this.props.profile}\r\n\t\t\t\tstatus={this.props.status}\r\n\t\t\t\tupdateStatus={this.props.updateStatus}\r\n\t\t\t\tsavePhoto = {this.props.savePhoto}\r\n\t\t\t\tsaveProfile = {this.props.saveProfile}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n\tprofile: state.profileServerData.profile,\r\n\tstatus: state.profileServerData.status,\r\n\tauthorizedUserId: state.auth.userId,\r\n\tisAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto,  saveProfile}),\r\n\twithRouter\r\n\t//withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}